{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"API Documentation - My Learning Path","text":""},{"location":"#what_is_this_all_about","title":"What Is This All About?","text":"<p>After starting my Python learning journey and being a senior technical writer, API documentation initially seemed like the next step. At first, I dreamt of it as a distant and mysterious land, far off. Now, it has become an exciting and achievable area of knowledge and practice.</p> <p>This repository showcases my approach to learning the fundamentals and nuances of API documentation. You'll find various resources, examples, and my personal insights as I explore best practices in documenting APIs.  </p> <p>I'll be coding in Python and following the API first approach suggested by the OpenAPI specificiation.</p> <p>I hope this helps you learn about API documentation!  </p>"},{"location":"#why","title":"Why?","text":"<p>This repository aims to present the complete process of API development from the point of view of a technical writer. To do so I'll follow each stage of the Software Development Life cycle (SDLC) and provide examples of both the related document for each stage and the PYthon API code.</p>"},{"location":"#how","title":"How?","text":"<p>To achieve the goal of learning about API documentation (and coding), I'll apply a progressive and iterative approach, which consists of the following steps:  </p> <ol> <li>Disclose and describe the steps of the Software Development Life Cycle (SDLC).  </li> <li>Create all required SDLC documentation.  </li> <li>Create a kanban-like board using GitHub projects.  </li> <li>Implement the user stories from the GitHub project iteratively.  </li> <li>Create the Python code and the OpenAPI Specification.  </li> <li>Explain API testing using Swagger and Postman.    </li> </ol> <p>Open the following link to check the documentation - TO DO </p> <p>Use of Gen AI</p> <p>Since my technical writing experience does not cover all the SDLC stages, I'll be using Gen AI tools to provide the narrative and draft samples for those stages.</p>"},{"location":"#contact","title":"Contact","text":"<ul> <li>My LinkedIn profile </li> <li>Other API documentation samples</li> </ul>"},{"location":"api-first/","title":"API First","text":""},{"location":"api-first/#overview","title":"Overview","text":"<p>The API First approach places the design and specification of an API at the forefront of the development process. Instead of creating APIs as an afterthought to meet the needs of other parts of an application, the API is treated as a product from the beginning, guiding the entire software development lifecycle (SDLC).   </p> <p>This ensures that the API is well-thought-out, meets the needs of its consumers, and evolves in a structured manner. By creating a clear and detailed OpenAPI specification early on, developers and stakeholders can work from a shared understanding, reducing misunderstandings and improving collaboration.</p>"},{"location":"api-first/#sdlc_and_api_first","title":"SDLC and API First","text":"<p>The SDLC under the API First approach involves several key phases:    </p> <ol> <li>Planning - where business goals and API requirements are defined  </li> <li>Design- where the API is described using a formal OpenAPI spec  </li> <li>Contract finalization - where the API specification becomes a binding agreement between developers and consumers.   </li> <li>Development - where development proceeds based on this specification, ensuring that the implementation aligns with what has been agreed upon.   </li> <li>Testing - where rigorous testing and quality assurance are performed before the API is deployed and monitored in production.   </li> </ol> <p>The API is continuously improved post-release, with an emphasis on maintaining documentation, monitoring performance, and supporting versioning as needed. </p>"},{"location":"api-first/development/","title":"API First Development Approach","text":""},{"location":"api-first/development/#overview","title":"Overview","text":"<p>TO DO</p>"},{"location":"api-first/development/#development_process","title":"Development Process","text":"<p>TO DO </p>"},{"location":"api-first/development/#planning_and_ideation","title":"Planning and Ideation","text":"<p>Goal</p> <p>Identify business requirements and the purpose of the API.  </p> <p>Steps:    </p> <ul> <li>Meet with stakeholders to define use cases and gather requirements.  </li> <li>Identify the target audience (internal teams, partners, or external developers).  </li> <li>Draft initial API requirements, focusing on core features.    </li> </ul> <p>Deliverables:    </p> <ul> <li>High-level API requirements.  </li> <li>Use case definitions.</li> </ul>"},{"location":"api-first/development/#api_design_openapi_specification","title":"API Design (OpenAPI Specification)","text":"<p>Goal</p> <p>Design the API using the OpenAPI specification before any development starts.    </p> <p>Steps:    </p> <ul> <li>Create an OpenAPI spec (YAML or JSON) to define endpoints, methods (e.g., <code>GET</code>, <code>POST</code>), request parameters,  and response formats.    </li> <li>Collaborate with stakeholders to validate the API contract.  </li> <li>Iterate and refine the design based on feedback from consumers.    </li> </ul> <p>Deliverables:    </p> <ul> <li>OpenAPI spec (v1.0) describing all endpoints, data models, and security requirements.  </li> <li>Mock server or documentation preview (e.g., using Swagger UI) for consumer feedback.</li> </ul>"},{"location":"api-first/development/#api_contract_finalization","title":"API Contract Finalization","text":"<p>Goal</p> <p>Establish the API contract as a binding agreement between the API provider and consumers.  </p> <p>Steps:  </p> <ul> <li>Share the OpenAPI spec with consumers for early integration testing.  </li> <li>Freeze the API contract once feedback is incorporated.  </li> </ul> <p>Deliverables:  </p> <ul> <li>Finalized API contract with stakeholder approval.  </li> <li>Mock server for developers to simulate interactions.</li> </ul>"},{"location":"api-first/development/#development","title":"Development","text":"<p>Goal</p> <p>Implement the API backend following the agreed API contract.  </p> <p>Steps:  </p> <ul> <li>Generate server-side code using OpenAPI tools (e.g., Swagger Codegen).  </li> <li>Implement business logic and integrate it with data sources.  </li> <li>Conduct unit tests to ensure individual components work as expected.  </li> <li>Use mock servers for early testing of API consumers.  </li> </ul> <p>Deliverables:  </p> <ul> <li>Backend code implementation.  </li> <li>Unit test coverage.</li> </ul>"},{"location":"api-first/development/#testing_and_quality_assurance","title":"Testing and Quality Assurance","text":"<p>Goal</p> <p>Ensure the API meets functional and non-functional requirements.  </p> <p>Steps:  </p> <ul> <li>Perform contract testing to verify the API adheres to the OpenAPI spec.  </li> <li>Conduct integration tests with real data and external services.  </li> <li>Perform security testing, including authentication and authorization.  </li> <li>Conduct performance testing (load, stress, etc.) to verify scalability.  </li> </ul> <p>Deliverables:  </p> <ul> <li>Test results (unit, integration, performance, and security).  </li> <li>Fixes and optimizations based on test outcomes.  </li> </ul>"},{"location":"api-first/development/#documentation_and_developer_experience","title":"Documentation and Developer Experience","text":"<p>Goal</p> <p>Provide comprehensive and user-friendly API documentation.  </p> <p>Steps:  </p> <ul> <li>Auto-generate interactive documentation from the OpenAPI spec using tools like Swagger UI or Redoc.  </li> <li>Include examples, usage guides, and response formats.  </li> <li>Publish SDKs and client libraries if applicable.  </li> </ul> <p>Deliverables:  </p> <ul> <li>Interactive API documentation.  </li> <li>API examples and usage guides.  </li> <li>Client SDKs (if applicable).</li> </ul>"},{"location":"api-first/development/#deployment","title":"Deployment","text":"<p>Goal</p> <p>Release the API to a production environment.  </p> <p>Steps:  </p> <ul> <li>Deploy the API to a staging environment for final acceptance testing.  </li> <li>Set up monitoring tools to track API performance and availability (e.g., Prometheus, Grafana).  </li> <li>Deploy the API to production, ensuring rollback strategies are in place.  </li> </ul> <p>Deliverables:  </p> <ul> <li>Production-ready API.  </li> <li>Monitoring dashboards.</li> </ul>"},{"location":"api-first/development/#post-release_monitoring_and_maintenance","title":"Post-Release Monitoring and Maintenance","text":"<p>Goal</p> <p>Continuously monitor and improve the API after release.  </p> <p>Steps:  </p> <ul> <li>Monitor API usage, performance, and errors in real-time.  </li> <li>Apply patches and fixes to address any issues.  </li> <li>Gather feedback from API consumers and prioritize future improvements.  </li> <li>Plan for versioning and deprecate old versions as needed.  </li> </ul> <p>Deliverables:  </p> <ul> <li>Logs and performance metrics.  </li> <li>Bug fixes and feature enhancements.  </li> <li>API versioning strategy.</li> </ul>"},{"location":"sdlc/","title":"Software Development Life Cycle","text":""},{"location":"sdlc/#overview","title":"Overview","text":"<p>The Software Development Life Cycle (SDLC) is a framework that defines the stages involved in the development and maintenance of software applications. Each phase produces specific outputs or documents, often guided or supplemented by technical writers. Below is a breakdown of each SDLC step, its process, and examples of associated technical writing documents.  </p> <p>The stages of the SDLC are the following:  </p> <ol> <li>Planning/Requirements Gathering  </li> <li>System Design  </li> <li>Implementation/Coding  </li> <li>Testing  </li> <li>Deployment  </li> <li>Maintenance  </li> <li>End-user Training and Documentation    </li> </ol> <p>Info</p> <p>Each SDLC phase requires its own set of documentation, and technical writers play an essential role in ensuring the clarity and accuracy of these documents, making it easier for teams to collaborate and for users to interact with the system.  </p>"},{"location":"sdlc/#sdlc_details","title":"SDLC Details","text":"<p>To learn more about the SDLC check the following table disclosing each stage with more details:  </p> Stage Description Technical Writer Documents Planning/Requirements Gathering In this phase, the project's goals, objectives, scope, and potential risks are identified. Stakeholders and teams gather functional and non-functional requirements for the system. Technical writers collaborate with stakeholders, engineers, and product owners to document the business requirements, technical specifications, and scope of work. Requirements Specification Document (RSD): This outlines the system's functional and non-functional requirements.Example: A Business Requirements Document (BRD) that details what the end-users expect from the system. System Design Based on the requirements, architects and developers create high-level and detailed designs of the system. This includes the architecture, database design, and user interface mockups. Writers document the design specifications and data models to ensure developers and stakeholders have clear guidance on implementation. System Design Document (SDD): Describes system components, interfaces, data models, and architectural diagrams.Example: A Data Flow Diagram (DFD) explaining how data moves within the system and a **System Architecture Document that describes server infrastructure and client-server communication. Implementation/Coding The actual development of the software takes place. Developers write code, build features, and conduct initial unit testing. Writers create developer-focused documentation, such as API references or code integration guides, and collaborate on in-line code comments. API Documentation: Details how to use and integrate with the system\u2019s APIs.Example: A REST API Guide for integrating an external payment service with your system, detailing endpoints, request/response formats, and authentication. Testing The system undergoes various forms of testing, such as unit, integration, system, and acceptance testing, to identify bugs and ensure all requirements are met. Writers help create testing plans and document known issues or test results. Test Case Document: Defines how to verify that each function or feature meets the requirements.Example: A Test Plan for ensuring that the user authentication feature works correctly, detailing the different test cases, expected outcomes, and pass/fail criteria. Deployment The software is delivered to the production environment, and it is made available to end-users. Writers assist in creating deployment guides and documenting configuration settings, upgrade paths, and rollback procedures. Deployment Guide: Instructions on how to install, configure, and deploy the software to the production environment.Example: A Cloud Deployment Manual for installing the application on AWS, covering steps for server setup, load balancing, and environment configuration. Maintenance After deployment, the system is monitored, and any issues are addressed with patches or updates. New features may be added in future iterations. Writers help with user guides, troubleshooting documentation, and release notes for future versions. Release Notes: Summarize new features, bug fixes, and known issues for each new version.Example: A Release Notes document for version 1.2.0, listing new features, fixed bugs, and deprecated functions. End-User Training &amp; Documentation As part of the rollout, end-users are trained on the new system through tutorials or training sessions. Writers create user guides, FAQs, video tutorials, and other materials to facilitate learning. User Manual: Guides users on how to operate the system.Example: A Getting Started Guide for an e-commerce platform that explains how users can create accounts, browse products, and complete purchases."},{"location":"sdlc/#the_api_first_approach","title":"The API First Approach","text":"<p>The API First approach places the design and specification of an API at the forefront of the development process. Instead of creating APIs as an afterthought to meet the needs of other parts of an application, the API is treated as a product from the beginning, guiding the entire software development lifecycle (SDLC). This ensures that the API is well-thought-out, meets the needs of its consumers, and evolves in a structured manner.   </p> <p>By creating a clear and detailed OpenAPI specification early on, developers and stakeholders can work from a shared understanding, reducing misunderstandings and improving collaboration.</p> <p>The SDLC under the API First approach involves several key phases as listed below:   </p> <ol> <li>Planning - where business goals and API requirements are defined.  </li> <li>Design - where the API is described using a formal OpenAPI spec.  </li> <li>Contract finalization - where the API specification becomes a binding agreement between developers and consumers. Development proceeds based on this specification, ensuring that the implementation aligns with what has been agreed upon.  </li> <li>Testing and quality assurance - Test are performed before the API is deployed and monitored in production.   </li> </ol> <p>The API is continuously improved post-release, with an emphasis on maintaining documentation, monitoring performance, and supporting versioning as needed.  </p>"},{"location":"sdlc/#a_closer_look","title":"A Closer Look","text":"<p>To learn more about the API First development approach, check out the following table containing further details:    </p> Stage Goal Steps Deliverables Planning and Ideation Identify business requirements and the purpose of the API. <ol><li>Meet with stakeholders to define use cases and gather requirements.</li><li>Identify the target audience (internal teams, partners, or external developers).</li><li>Draft initial API requirements, focusing on core features.</li></ol> <ul><li>High-level API requirements.</li><li>Use case definitions.</li><ol> API Design (OpenAPI Specification) Design the API using the OpenAPI specification before any development starts. <ol><li>Create an OpenAPI spec (YAML or JSON) to define endpoints, methods (e.g., <code>GET</code>, <code>POST</code>), request parameters, and response formats.</li><li>Collaborate with stakeholders to validate the API contract.</li><li>Iterate and refine the design based on feedback from consumers.</li><ol> <ol><li>OpenAPI spec (v1.0) describing all endpoints, data models, and security requirements.</li><li>Mock server or documentation preview (e.g., using Swagger UI) for consumer feedback.</li></ol> API Contract Finalization Establish the API contract as a binding agreement between the API provider and consumers. <ol><li>Share the OpenAPI spec with consumers for early integration testing.</li><li>Freeze the API contract once feedback is incorporated.</li></ol> <ul><li>Finalized API contract with stakeholder approval.</li><li>Mock server for developers to simulate interactions.</li><ul> Development Implement the API backend following the agreed API contract. <ol><li>Generate server-side code using OpenAPI tools (e.g., Swagger Codegen).</li><li>Implement business logic and integrate it with data sources.</li><li>Conduct unit tests to ensure individual components work as expected.</li><li>Use mock servers for early testing of API consumers.</li></ol> <ul><li>Backend code implementation.</li><li>Unit test coverage.</li></ul> Testing and Quality Assurance Ensure the API meets functional and non-functional requirements. <ol><li>Perform contract testing to verify the API adheres to the OpenAPI spec.</li><li>Conduct integration tests with real data and external services.</li><li>Perform security testing, including authentication and authorization.</li>Conduct performance testing (load, stress, etc.) to verify scalability.<ol> <ul><li>Test results (unit, integration, performance, and security).</li><li>Fixes and optimizations based on test outcomes.</li></ul> Documentation and Developer Experience Provide comprehensive and user-friendly API documentation. <ol><li>Auto-generate interactive documentation from the OpenAPI spec using tools like Swagger UI or Redoc.</li><li>Include examples, usage guides, and response formats.</li><li>Publish SDKs and client libraries if applicable.</li> <ul><li>Interactive API documentation.</li><li>API examples and usage guides.</li><li>Client SDKs (if applicable).</li></ul> Deployment Release the API to a production environment. <ol><li>Deploy the API to a staging environment for final acceptance testing.</li><li>Set up monitoring tools to track API performance and availability (e.g., Prometheus, Grafana).</li><li>Deploy the API to production, ensuring rollback strategies are in place.</li></ol> <ul><li>Production-ready API.</li><li>Monitoring dashboards.</li></ul> Post-Release Monitoring and Maintenance Continuously monitor and improve the API after release. <ol><li>Monitor API usage, performance, and errors in real-time.</li><li>Apply patches and fixes to address any issues.</li><li>Gather feedback from API consumers and prioritize future improvements.</li><li>Plan for versioning and deprecate old versions as needed.</li></ol> <ul><li>Logs and performance metrics.</li><li>Bug fixes and feature enhancements.</li><li>API versioning strategy.</li></ul>"},{"location":"sdlc/deployment/","title":"API Deployment","text":""},{"location":"sdlc/deployment/#overview","title":"Overview","text":"<p>The software is delivered to the production environment, and it is made available to end-users. Technical Writers assist in creating deployment guides and documenting configuration settings, upgrade paths, and rollback procedures.  </p>"},{"location":"sdlc/deployment/#associated_documents_deployment_guide","title":"Associated Documents: Deployment Guide","text":"<p>Deployment Guide are the documents associated to this stage:   </p> <p>Instructions on how to install, configure, and deploy the software to the production environment.  </p>"},{"location":"sdlc/deployment/#example","title":"Example","text":"<p>An example of a deployment guide could be a Cloud Deployment Manual for installing the application on AWS, covering steps for server setup, load balancing, and environment configuration.  </p> <p>Check the following fictional sample of a deployment guide of a Web Application on AWS:    </p>"},{"location":"sdlc/deployment/#web_application_deployment_on_aws_-_deployment_guide","title":"Web Application Deployment on AWS - Deployment Guide","text":""},{"location":"sdlc/deployment/#system_information","title":"System Information","text":"<p>Version: 1.0   Target Environment: AWS EC2, S3, RDS      Date: October 22, 2024</p>"},{"location":"sdlc/deployment/#prerequisites","title":"Prerequisites","text":"<ul> <li> AWS account with necessary permissions.</li> <li> AWS CLI installed and configured.</li> <li> SSH key for EC2 instance access.  </li> </ul>"},{"location":"sdlc/deployment/#deployment_steps","title":"Deployment Steps","text":""},{"location":"sdlc/deployment/#step_1_-_set_up_ec2_instance","title":"Step 1 - Set Up EC2 Instance","text":"<ol> <li>Log in to AWS Management Console.  </li> <li>Navigate to EC2 Dashboard.  </li> <li>Launch a new instance:     <ul> <li>Choose Amazon Linux 2 as the AMI.  </li> <li>Select t2.micro as the instance type.  </li> <li>Configure network settings (assign to the default VPC).  </li> <li>Add storage (minimum 8GB).  </li> </ul> </li> <li>Review and launch the instance.  </li> </ol>"},{"location":"sdlc/deployment/#step_2_-_install_application_dependencies","title":"Step 2 - Install Application Dependencies","text":"<ol> <li>SSH into the EC2 instance:    Text Only<pre><code>ssh -i \"your-key.pem\" ec2-user@your-ec2-public-ip\n</code></pre></li> <li>Update the instance and install necessary packages: Text Only<pre><code>   sudo yum update -y\n   sudo yum install httpd php php-mysql -y     \n</code></pre></li> </ol>"},{"location":"sdlc/deployment/#step_3_-_deploy_the_web_application","title":"Step 3 - Deploy the Web Application","text":"<ol> <li>Copy your web application files to the EC2 instance:    Text Only<pre><code>scp -i \"your-key.pem\" /local/path/to/app/* ec2-user@your-ec2-public-ip:/var/www/html/     \n</code></pre></li> <li>Start the Apache server:  </li> </ol> <p><code>sudo systemctl start httpd    sudo systemctl enable httpd</code></p>"},{"location":"sdlc/deployment/#step_4_-_database_configuration_rds","title":"Step 4 - Database Configuration (RDS)","text":"<ol> <li> <p>Set up an RDS instance (MySQL):  </p> <ul> <li>Choose the RDS service in the AWS Console.  </li> <li>Launch a new MySQL instance, configure security groups, and note down the connection endpoint.  </li> </ul> </li> <li> <p>Connect your application to the RDS database by updating the application\u2019s configuration file with the database connection string.  </p> </li> </ol>"},{"location":"sdlc/deployment/#step_5_-_test_and_verify_deployment","title":"Step 5 - Test and Verify Deployment","text":"<ol> <li>Open a browser and navigate to your EC2 instance's public IP.  </li> <li>Ensure the application loads and connects to the database correctly.</li> </ol>"},{"location":"sdlc/end-user/","title":"End-User Documentation","text":""},{"location":"sdlc/end-user/#overview","title":"Overview","text":"<p>As part of the rollout, end-users are trained on the new system through tutorials or training sessions. Technical Writers create user guides, FAQs, video tutorials, and other materials to facilitate learning.</p>"},{"location":"sdlc/end-user/#associated_documents_user_manual","title":"Associated Documents: User Manual","text":"<p>Guides users on how to operate the system.</p>"},{"location":"sdlc/end-user/#example","title":"Example","text":"<p>A Getting Started Guide for an e-commerce platform called Nexus: Beyonder that explains how users can create accounts, browse products, and complete purchases.    </p>"},{"location":"sdlc/end-user/#getting_started_guide_for_nexus-beyonder","title":"Getting Started Guide for Nexus-Beyonder","text":"<p>Welcome to Nexus-Beyonder, your portal to an infinite marketplace. This guide will walk you through the steps to create an account, browse products, and make your first purchase.</p>"},{"location":"sdlc/end-user/#step_1_-_creating_your_account","title":"Step 1 - Creating Your Account","text":"<p>To get started on Nexus-Beyonder, you\u2019ll first need to create an account as follows:  </p> <ol> <li>Go to the Nexus-Beyonder homepage and click on Sign Up located in the upper right corner of the page.  </li> <li> <p>Fill in the required fields:  </p> <ul> <li>Full Name </li> <li>Email Address </li> <li>Password Note: must contain at least 8 characters, with a mix of uppercase, lowercase, numbers, and special characters. </li> <li>Phone Number Note: optional but recommended for 2-factor authentication. </li> </ul> </li> <li> <p>Agree to the Terms of Service and Privacy Policy.  </p> </li> <li>Verify Your Email  </li> </ol> <p>After completing the form, you\u2019ll receive a verification email. Click the link in the email to activate your account.</p>"},{"location":"sdlc/end-user/#step_2_-_logging_in","title":"Step 2 - Logging In","text":"<p>Once your email is verified follow these steps:  </p> <ol> <li>Return to the Nexus-Beyonder homepage.  </li> <li>Click Log In using your email and password.</li> </ol>"},{"location":"sdlc/end-user/#browsing_products","title":"Browsing Products","text":"<p>With your account created, you\u2019re ready to explore Nexus-Beyonder\u2019s categories such as:  </p> <ul> <li>Electronics</li> <li>Fashion</li> <li>Home &amp; Garden</li> <li>Books</li> <li>Sports &amp; Outdoors</li> <li>And more!</li> </ul> <p>If you're looking for something specific, you can use the search bar at the top of the page and apply filters to narrow your search by:  </p> <ul> <li>Price range  </li> <li>Customer ratings  </li> <li>Brand  </li> <li>Shipping options (e.g., same-day delivery)  </li> </ul>"},{"location":"sdlc/end-user/#viewing_product_details","title":"Viewing Product Details","text":"<p>To view the details of a product click on the product to show the following information:  </p> <ul> <li>Description - A full description of the item</li> <li>Price - The current price, with potential discounts displayed</li> <li>Reviews - See what other users think of the product</li> <li>Shipping Info - Estimated delivery times and options</li> </ul>"},{"location":"sdlc/end-user/#making_a_purchase","title":"Making a Purchase","text":"<p>Found something you love? Here's how to make your purchase:  </p> <ol> <li>Select your item by clicking Add to Cart on the product page.  </li> <li>Review Your Cart by clicking the Cart icon in the upper-right corner. Here you can:  </li> </ol> <ul> <li>Adjust quantities</li> <li>Remove items</li> <li>See the subtotal  </li> </ul> <ol> <li>Click Checkout to move on to the purchase process.  </li> <li>Enter Shipping Information.  </li> <li>Choose Payment Method.  </li> <li>Review and Place Order.    </li> </ol> <p>Track your order</p> <p>You\u2019ll receive an order confirmation email with the details of your purchase. You can track your order from your Account Dashboard.</p>"},{"location":"sdlc/end-user/#faqs","title":"FAQs","text":"What should I do if I forget my password? <p>Solution/Workaround </p> <p>Click Forgot Password on the login page and enter your registered email address. You will receive an email with instructions to reset your password.  </p> Can I track my order? <p>Solution/Workaround </p> <p>Yes! Once your order is placed, you can track its progress from your Account Dashboard under Orders.</p> What payment methods are accepted? <p>Solution/Workaround </p> <p>We accept credit/debit cards, PayPal, and most major digital wallets.</p>"},{"location":"sdlc/end-user/#support","title":"Support","text":"<p>Need further assistance? Our customer support team is here to help.</p> <ul> <li>Visit our Support Center for help articles and live chat.</li> <li>Contact us at support@nexus-beyonder.com.</li> </ul>"},{"location":"sdlc/implementation-coding/","title":"Implementation and Coding","text":""},{"location":"sdlc/implementation-coding/#overview","title":"Overview","text":"<p>The actual development of the software takes place. Developers write code, build features, and conduct initial unit testing. Technical Writers create developer-focused documentation, such as API references or code integration guides, and collaborate on in-line code comments.</p> <p>T</p>"},{"location":"sdlc/implementation-coding/#associated_documents_api_documentation","title":"Associated Documents: API Documentation","text":"<p>Details how to use and integrate with the system\u2019s APIs.</p>"},{"location":"sdlc/implementation-coding/#example","title":"Example","text":"<p>Check the following minimum API code for a weather API:  </p> Python<pre><code># API Description  \n# Show weather information from public weather API\n# from flask import Flask, request ONLY for Flask APIs. This is not a Flask API, is consuming an external API\n\n# import libraries, modules  \nimport requests\n\n# Openweather API Map data structure    \n\nweather_data= {\n  \"coord\": {\n    \"lon\": 10.99,\n    \"lat\": 44.34\n  },\n  \"weather\": [\n    {\n      \"id\": 501,\n      \"main\": \"Rain\",\n      \"description\": \"moderate rain\",\n      \"icon\": \"10d\"\n    }\n  ],\n  \"base\": \"stations\",\n  \"main\": {\n    \"temp\": 298.48,\n    \"feels_like\": 298.74,\n    \"temp_min\": 297.56,\n    \"temp_max\": 300.05,\n    \"pressure\": 1015,\n    \"humidity\": 64,\n    \"sea_level\": 1015,\n    \"grnd_level\": 933\n  },\n  \"visibility\": 10000,\n  \"wind\": {\n    \"speed\": 0.62,\n    \"deg\": 349,\n    \"gust\": 1.18\n  },\n  \"rain\": {\n    \"1h\": 3.16\n  },\n  \"clouds\": {\n    \"all\": 100\n  },\n  \"dt\": 1661870592,\n  \"sys\": {\n    \"type\": 2,\n    \"id\": 2075663,\n    \"country\": \"IT\",\n    \"sunrise\": 1661834187,\n    \"sunset\": 1661882248\n  },\n  \"timezone\": 7200,\n  \"id\": 3163858,\n  \"name\": \"Zocca\",\n  \"cod\": 200\n}  \n\n\n# When consuming an external API:\n# 1) we DO NOT create a Flask app (app = Flask(__name__) )\n# 2) we do not define endpoints/methods: we pass the base url and parameters\n\n# BY CITY NAME request: https://api.openweathermap.org/data/2.5/weather?q={city name}&amp;appid={API key}\n# /weather?city={city=city_name} GET all weather info DEPRECATED but still in use\n\n# BY LON LAT https://api.openweathermap.org/data/2.5/weather?lat={lat}&amp;lon={lon}&amp;appid={API key}\n# Define function to get the data I want from the weather info API\n\ndef get_weather_info(city_name, api_key):\n    base_url = \"https://api.openweathermap.org/data/2.5/weather\"\n    # Parameters from the weather API data structure I want to consume\n    parameters = {\n        \"appid\": api_key, # Api key\n        \"q\": city_name,\n        \"units\": \"metric\",\n        # \"lat\": 27.7576,\n        # \"lon\": -15.5841,\n        # \"zip\": \"35100\"\n        }\n\n    response_data = requests.get(base_url, params = parameters)\n    response_status_code = response_data.status_code\n\n    if response_status_code == 200:\n        return response_data.json()\n    else:\n        return {\"Request response error\": response_status_code}\n\n#  Check if the Python script is being run directly (not imported as a module in another script). \n# If the script is being executed directly, the code within this block will run. \n# This is a common idiom in Python to ensure that certain code is only executed when the script is run directly, \n# and not when it is imported.`\n\nif __name__ == \"__main__\":\n    city = input(\"Enter city name: \")\n    api_key = &lt;you api key here&gt; \n    weather_info = get_weather_info(city, api_key)\n    print(weather_info)\n\n# /forecast/?city={city_name} GET query by {city}  \n</code></pre> <p>API documentation sample</p> <p>Check my version of the Open Weather API documentation.</p>"},{"location":"sdlc/maintenance/","title":"Maintenance","text":""},{"location":"sdlc/maintenance/#overview","title":"Overview","text":"<p>After deployment, the system is monitored, and any issues are addressed with patches or updates. New features may be added in future iterations. Technical Writers help with user guides, troubleshooting documentation, and release notes for future versions.</p> <p>T</p>"},{"location":"sdlc/maintenance/#associated_documents_release_notes","title":"Associated Documents: Release Notes","text":"<p>Summarize new features, bug fixes, and known issues for each new version.</p>"},{"location":"sdlc/maintenance/#example","title":"Example","text":"<p>A Release Notes document for version 2.3.0, listing new features, fixed bugs, and deprecated functions.    </p>"},{"location":"sdlc/maintenance/#release_notes_version_230","title":"Release Notes (Version 2.3.0)","text":"<p>Release Information</p> <p>Release Date: October 20, 2024  </p>"},{"location":"sdlc/maintenance/#summary","title":"Summary","text":"<p>Version 2.3.0 introduces new features, bug fixes, and performance improvements to the project management application. This update enhances task management capabilities and resolves several critical bugs from the previous release.  </p>"},{"location":"sdlc/maintenance/#new_features","title":"New Features","text":"<ul> <li>Task Dependencies: Users can now set task dependencies, allowing tasks to be blocked or triggered by other tasks.</li> <li>Enhanced Notifications: Real-time notifications for task updates and project changes.</li> <li>Dark Mode: A new theme option that reduces eye strain and conserves battery life for mobile users.  </li> </ul>"},{"location":"sdlc/maintenance/#bug_fixes","title":"Bug Fixes","text":"<ul> <li>Task duplication bug: Resolved an issue where tasks were duplicated when the user pressed the \u201cEnter\u201d key rapidly.</li> <li>Search filter error: Fixed a problem where search filters were not correctly applied in the Task Manager.</li> <li>UI glitches: Minor visual inconsistencies in the task list view have been corrected.  </li> </ul>"},{"location":"sdlc/maintenance/#performance_improvements","title":"Performance Improvements","text":"<ul> <li>Faster Load Times: Optimized task data retrieval to reduce page load times by 20%.</li> <li>Reduced Memory Usage: Improved memory management during large project operations.  </li> </ul>"},{"location":"sdlc/maintenance/#known_issues","title":"Known Issues","text":"<ul> <li>Mobile Scrolling Bug: On some devices, scrolling the project list may not work smoothly. A fix is being developed for the next release.</li> </ul>"},{"location":"sdlc/planning-requirements/","title":"Planning and Requirements","text":""},{"location":"sdlc/planning-requirements/#overview","title":"Overview","text":"<p>In this phase, the project's goals, objectives, scope, and potential risks are identified. Stakeholders and teams gather functional and non-functional requirements for the system. Technical writers collaborate with stakeholders, engineers, and product owners to document the business requirements, technical specifications, and scope of work.  </p>"},{"location":"sdlc/planning-requirements/#associated_documents_requirements_specification_document","title":"Associated Documents: Requirements Specification Document","text":"<p>Requirements Specification Document (RSD): This outlines the system's functional and non-functional requirements.    </p>"},{"location":"sdlc/planning-requirements/#example","title":"Example","text":"<p>A Requirements Specification Document for an E-commerce Platform.  </p>"},{"location":"sdlc/planning-requirements/#requirements_specification_document_for_an_e-commerce_platform","title":"Requirements Specification Document for an E-commerce Platform","text":""},{"location":"sdlc/planning-requirements/#overview_1","title":"Overview","text":"<p>Project Name: ShopMaster Version: 1.0 Author: Javier Martinez Date: October 22, 2024</p> <p>ShopMaster is an e-commerce platform that allows users to browse products, add items to the cart, and complete purchases. The system will support online payments, user accounts, and order tracking.  </p>"},{"location":"sdlc/planning-requirements/#functional_requirements","title":"Functional Requirements","text":"Requirement Description User Registration <ul><li>The system must allow users to create an account with an email and password.</li><li>A confirmation email should be sent to the user upon registration.</li></ul> Product Browsing <ul><li>Users should be able to browse products by category and search by name or SKU.</li><li>The system must display product details including name, description, price, and stock availability.</li><ul> Shopping Cart <ul><li>Users can add and remove products from the cart.</li><li>The system will update the total price as items are added or removed.</li></ul> Checkout <ul><li>The system will guide the user through the checkout process.</li><li>Payment integration with Stripe or PayPal must be supported.</li><ul> Order Management Users should be able to view their past orders and track current orders through the system."},{"location":"sdlc/planning-requirements/#non-functional_requirements","title":"Non-Functional Requirements","text":"Requirement Description Performance The system must handle up to 10,000 concurrent users without performance degradation. Security User passwords must be stored using bcrypt hashing, and sensitive information (e.g., payment details) must be encrypted."},{"location":"sdlc/system-design/","title":"System Design","text":""},{"location":"sdlc/system-design/#overview","title":"Overview","text":"<p>Based on the requirements, architects and developers create high-level and detailed designs of the system. This includes the architecture, database design, and user interface mockups. Technical Writers document the design specifications and data models to ensure developers and stakeholders have clear guidance on implementation.  </p>"},{"location":"sdlc/system-design/#associated_documents_deployment_guide","title":"Associated Documents: Deployment Guide","text":"<p>System Design Document (SDD): Describes system components, interfaces, data models, and architectural diagrams.  </p>"},{"location":"sdlc/system-design/#example","title":"Example","text":"<p>A Data Flow Diagram (DFD) explaining how data moves within the system and a System Architecture Document that describes server infrastructure and client-server communication.  </p>"},{"location":"sdlc/system-design/#system_design_document_sdd_project_management_system","title":"System Design Document (SDD) (Project Management System)","text":"<p>System Name: Project Nexus   Version: 1.0   Date: October 22, 2024   Author: Javier Martinez</p>"},{"location":"sdlc/system-design/#overview_1","title":"Overview","text":"<p>Project Nexus is a cloud-based project management system designed to help teams organize, track, and manage project tasks. The system integrates task management, user collaboration, and reporting.</p>"},{"location":"sdlc/system-design/#system_architecture","title":"System Architecture","text":"<ul> <li>Client Tier: A responsive web interface developed with React.js that interacts with the backend via RESTful APIs.</li> <li>Server Tier: Backend services developed with Node.js and Express.js, handling business logic and API requests.</li> <li>Database Tier: A relational database (MySQL) hosted on AWS RDS for storing project, task, and user data.</li> </ul>"},{"location":"sdlc/system-design/#key_components","title":"Key Components","text":"<ol> <li>User Authentication Module:   <ul> <li>OAuth 2.0 for user login and authorization.  </li> <li>JWT-based token management for session handling.  </li> </ul> </li> <li>Task Management Module:   <ul> <li>Task creation, assignment, and tracking.  </li> <li>Task dependencies with visual representation on Gantt charts.</li> </ul> </li> <li>Reporting Module:   <ul> <li>Real-time project status updates.  </li> <li>Visual dashboards using Chart.js for performance tracking.  </li> </ul> </li> </ol>"},{"location":"sdlc/system-design/#data_flow","title":"Data Flow","text":"<p>CONVERT INTO A DIAGRAM </p> <ul> <li>Client Request: The user sends a request (e.g., create task) from the React.js interface.</li> <li>Server Processing: The Node.js server processes the request and communicates with the database.</li> <li>Database Interaction: The MySQL database stores or retrieves the necessary data and responds to the server.</li> <li>Client Response: The processed data is returned to the client for rendering.</li> </ul>"},{"location":"sdlc/testing/","title":"Testing","text":""},{"location":"sdlc/testing/#overview","title":"Overview","text":"<p>The system undergoes various forms of testing, such as unit, integration, system, and acceptance testing, to identify bugs and ensure all requirements are met. Technical Writers help create testing plans and document known issues or test results.</p>"},{"location":"sdlc/testing/#associated_documents_test_case_document","title":"Associated Documents: Test Case Document","text":"<p>Test Case Document: Defines how to verify that each function or feature meets the requirements.  </p>"},{"location":"sdlc/testing/#example","title":"Example","text":"<p>A Test Plan for ensuring that the user authentication feature works correctly, detailing the different test cases, expected outcomes, and pass/fail criteria.  </p>"},{"location":"sdlc/testing/#test_case_user_login_functionality","title":"Test Case (User Login Functionality)","text":"<p>Test Case ID: TC-001   Test Title: Verify Successful User Login   Description: This test case verifies that a registered user can log into the system using valid credentials.</p>"},{"location":"sdlc/testing/#preconditions","title":"Preconditions","text":"<p>The user must be registered in the system with a valid username and password.  </p>"},{"location":"sdlc/testing/#test_steps","title":"Test Steps","text":"<ol> <li>Navigate to the login page (<code>/login</code>).  </li> <li>Enter the valid username and password.  </li> <li>Click the \"Login\" button.  </li> <li>Observe the system behavior.  </li> </ol>"},{"location":"sdlc/testing/#expected_result","title":"Expected Result","text":"<ul> <li>The user is redirected to the dashboard page (<code>/dashboard</code>) and sees a personalized greeting message.  </li> <li>The session is active, and the user is logged in.  </li> </ul>"},{"location":"sdlc/testing/#actual_result","title":"Actual Result","text":"<p>(To be filled after test execution)</p>"},{"location":"sdlc/testing/#status","title":"Status","text":"<ul> <li>Pass / Fail</li> </ul>"}]}