{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"API Documentation - My Learning Path","text":""},{"location":"#what_is_this_all_about","title":"What Is This All About?","text":"<p>After starting my Python learning journey and being a senior technical writer, API documentation initially seemed like the next step. At first, I dreamt of it as a distant and mysterious land, far off. Now, it has become an exciting and achievable area of knowledge and practice.</p> <p>This repository showcases my approach to learning the fundamentals and nuances of API documentation. You'll find various resources, examples, and my personal insights as I explore best practices in documenting APIs.  </p> <p>I'll be coding in Python and following the API first approach suggested by the OpenAPI specificiation.</p> <p>I hope this helps you learn about API documentation!  </p>"},{"location":"#why","title":"Why?","text":"<p>This repository aims to present the complete process of API development from the point of view of a technical writer. To do so I'll follow each stage of the Software Development Life cycle (SDLC) and provide examples of both the related document for each stage and the PYthon API code.</p>"},{"location":"#how","title":"How?","text":"<p>To achieve the goal of learning about API documentation (and coding), I'll apply a progressive and iterative approach, which consists of the following steps:  </p> <ol> <li>Disclose and describe the steps of the Software Development Life Cycle (SDLC).  </li> <li>Create all required SDLC documentation.  </li> <li>Create a kanban-like board using GitHub projects.  </li> <li>Implement the user stories from the GitHub project iteratively.  </li> <li>Create the Python code and the OpenAPI Specification.  </li> <li>Explain API testing using Swagger and Postman.    </li> </ol> <p>Open the following link to check the documentation - TO DO </p> <p>Use of Gen AI</p> <p>Since my technical writing experience does not cover all the SDLC stages, I'll be using Gen AI tools to provide the narrative and draft samples for those stages.</p>"},{"location":"#contact","title":"Contact","text":"<ul> <li>My LinkedIn profile </li> <li>Other API documentation samples</li> </ul>"},{"location":"sdlc/","title":"Software Development Life Cycle","text":""},{"location":"sdlc/#overview","title":"Overview","text":""},{"location":"sdlc/#api_development_cycle","title":"API Development Cycle","text":""},{"location":"sdlc/#api_first","title":"API First","text":"<p>The software is delivered to the production environment, and it is made available to end-users. Technical Writing Role: Writers assist in creating deployment guides and documenting configuration settings, upgrade paths, and rollback procedures.  </p>"},{"location":"sdlc/#software_development_life_cycle_under_api_first_approach","title":"Software Development Life Cycle Under \"API First\" Approach","text":"<p>The API First approach places the design and specification of an API at the forefront of the development process. Instead of creating APIs as an afterthought to meet the needs of other parts of an application, the API is treated as a product from the beginning, guiding the entire software development lifecycle (SDLC). This ensures that the API is well-thought-out, meets the needs of its consumers, and evolves in a structured manner. By creating a clear and detailed OpenAPI specification early on, developers and stakeholders can work from a shared understanding, reducing misunderstandings and improving collaboration.</p> <p>The SDLC under the API First approach involves several key phases: planning, where business goals and API requirements are defined; design, where the API is described using a formal OpenAPI spec; and contract finalization, where the API specification becomes a binding agreement between developers and consumers. Development proceeds based on this specification, ensuring that the implementation aligns with what has been agreed upon. Once the API is built, rigorous testing and quality assurance are performed before the API is deployed and monitored in production. The API is continuously improved post-release, with an emphasis on maintaining documentation, monitoring performance, and supporting versioning as needed.  </p> <p>The following table provides a summarized view of the \"API First\" development cycle:    </p> Stage Goal Steps Deliverables Planning and Ideation Identify business requirements and the purpose of the API. <ol><li>Meet with stakeholders to define use cases and gather requirements.</li><li>Identify the target audience (internal teams, partners, or external developers).</li><li>Draft initial API requirements, focusing on core features.</li></ol> <ul><li>High-level API requirements.</li><li>Use case definitions.</li><ol> API Design (OpenAPI Specification) Design the API using the OpenAPI specification before any development starts. <ol><li>Create an OpenAPI spec (YAML or JSON) to define endpoints, methods (e.g., <code>GET</code>, <code>POST</code>), request parameters, and response formats.</li><li>Collaborate with stakeholders to validate the API contract.</li><li>Iterate and refine the design based on feedback from consumers.</li><ol> <ol><li>OpenAPI spec (v1.0) describing all endpoints, data models, and security requirements.</li><li>Mock server or documentation preview (e.g., using Swagger UI) for consumer feedback.</li></ol> API Contract Finalization Establish the API contract as a binding agreement between the API provider and consumers. <ol><li>Share the OpenAPI spec with consumers for early integration testing.</li><li>Freeze the API contract once feedback is incorporated.</li> <ul><li>Finalized API contract with stakeholder approval.</li><li>Mock server for developers to simulate interactions.</li><ul> Development Implement the API backend following the agreed API contract. <ol><li>Generate server-side code using OpenAPI tools (e.g., Swagger Codegen).</li><li>Implement business logic and integrate it with data sources.</li><li>Conduct unit tests to ensure individual components work as expected.</li><li>Use mock servers for early testing of API consumers.</li></ol> <ul><li>Backend code implementation.</li><li>Unit test coverage.</li></ul> Testing and Quality Assurance Ensure the API meets functional and non-functional requirements. <ol><li>Perform contract testing to verify the API adheres to the OpenAPI spec.</li><li>Conduct integration tests with real data and external services.</li><li>Perform security testing, including authentication and authorization.</li>Conduct performance testing (load, stress, etc.) to verify scalability.<ol> <ul><li>Test results (unit, integration, performance, and security).</li><li>Fixes and optimizations based on test outcomes.</li></ul> Documentation and Developer Experience Provide comprehensive and user-friendly API documentation. <ol><li>Auto-generate interactive documentation from the OpenAPI spec using tools like Swagger UI or Redoc.</li><li>Include examples, usage guides, and response formats.</li><li>Publish SDKs and client libraries if applicable.</li> <ul><li>Interactive API documentation.</li><li>API examples and usage guides.</li><li>Client SDKs (if applicable).</li></ul> Deployment Release the API to a production environment. <ol><li>Deploy the API to a staging environment for final acceptance testing.</li><li>Set up monitoring tools to track API performance and availability (e.g., Prometheus, Grafana).</li><li>Deploy the API to production, ensuring rollback strategies are in place.</li></ol> <ul><li>Production-ready API.</li><li>Monitoring dashboards.</li></ul> Post-Release Monitoring and Maintenance Continuously monitor and improve the API after release. <ol><li>Monitor API usage, performance, and errors in real-time.</li><li>Apply patches and fixes to address any issues.</li><li>Gather feedback from API consumers and prioritize future improvements.</li><li>Plan for versioning and deprecate old versions as needed.</li></ol> <ul><li>Logs and performance metrics.</li><li>Bug fixes and feature enhancements.</li><li>API versioning strategy.</li></ul>"},{"location":"sdlc/deployment/","title":"API Deployment","text":""},{"location":"sdlc/deployment/#overview","title":"Overview","text":"<p>The software is delivered to the production environment, and it is made available to end-users. Technical Writing Role: Writers assist in creating deployment guides and documenting configuration settings, upgrade paths, and rollback procedures.  </p>"},{"location":"sdlc/deployment/#associated_documents_deployment_guide","title":"Associated Documents: Deployment Guide","text":"<p>Deployment Guide: Instructions on how to install, configure, and deploy the software to the production environment.  </p>"},{"location":"sdlc/deployment/#example","title":"Example","text":"<p>A Cloud Deployment Manual for installing the application on AWS, covering steps for server setup, load balancing, and environment configuration.</p>"},{"location":"sdlc/end-user/","title":"End-User Documentation","text":""},{"location":"sdlc/end-user/#overview","title":"Overview","text":"<p>As part of the rollout, end-users are trained on the new system through tutorials or training sessions. Technical Writing Role: Writers create user guides, FAQs, video tutorials, and other materials to facilitate learning.</p> <p>T</p>"},{"location":"sdlc/end-user/#associated_documents_user_manual","title":"Associated Documents: User Manual:","text":"<p>Guides users on how to operate the system.</p>"},{"location":"sdlc/end-user/#example","title":"Example","text":"<p>A Getting Started Guide for an e-commerce platform that explains how users can create accounts, browse products, and complete purchases.</p>"},{"location":"sdlc/implementation-coding/","title":"Implementation and Coding","text":""},{"location":"sdlc/implementation-coding/#overview","title":"Overview","text":"<p>The actual development of the software takes place. Developers write code, build features, and conduct initial unit testing. Technical Writing Role: Writers create developer-focused documentation, such as API references or code integration guides, and collaborate on in-line code comments.</p> <p>T</p>"},{"location":"sdlc/implementation-coding/#associated_documents_api_documentation","title":"Associated Documents: API Documentation","text":"<p>Details how to use and integrate with the system\u2019s APIs.</p>"},{"location":"sdlc/implementation-coding/#example","title":"Example","text":"<p>A REST API Guide for integrating an external payment service with your system, detailing endpoints, request/response formats, and authentication.</p>"},{"location":"sdlc/maintenance/","title":"Maintenance","text":""},{"location":"sdlc/maintenance/#overview","title":"Overview","text":"<p>After deployment, the system is monitored, and any issues are addressed with patches or updates. New features may be added in future iterations. Technical Writing Role: Writers help with user guides, troubleshooting documentation, and release notes for future versions.</p> <p>T</p>"},{"location":"sdlc/maintenance/#associated_documents_release_notes","title":"Associated Documents: Release Notes","text":"<p>Summarize new features, bug fixes, and known issues for each new version.</p>"},{"location":"sdlc/maintenance/#example","title":"Example","text":"<p>A Release Notes document for version 1.2.0, listing new features, fixed bugs, and deprecated functions.</p>"},{"location":"sdlc/planning-requirements/","title":"Planning and Requirements","text":""},{"location":"sdlc/planning-requirements/#overview","title":"Overview","text":"<p>In this phase, the project's goals, objectives, scope, and potential risks are identified. Stakeholders and teams gather functional and non-functional requirements for the system. Technical Writing Role: Technical writers collaborate with stakeholders, engineers, and product owners to document the business requirements, technical specifications, and scope of work.  </p>"},{"location":"sdlc/planning-requirements/#associated_documents_requirements_specification_document","title":"Associated Documents: Requirements Specification Document","text":"<p>Requirements Specification Document (RSD): This outlines the system's functional and non-functional requirements.    </p>"},{"location":"sdlc/planning-requirements/#example","title":"Example","text":"<p>A Business Requirements Document (BRD) that details what the end-users expect from the system.  </p>"},{"location":"sdlc/system-design/","title":"System Design","text":""},{"location":"sdlc/system-design/#overview","title":"Overview","text":"<p>Based on the requirements, architects and developers create high-level and detailed designs of the system. This includes the architecture, database design, and user interface mockups. Technical Writing Role: Writers document the design specifications and data models to ensure developers and stakeholders have clear guidance on implementation.  </p>"},{"location":"sdlc/system-design/#associated_documents_deployment_guide","title":"Associated Documents: Deployment Guide","text":"<p>System Design Document (SDD): Describes system components, interfaces, data models, and architectural diagrams.  </p>"},{"location":"sdlc/system-design/#example","title":"Example","text":"<p>A Data Flow Diagram (DFD) explaining how data moves within the system and a System Architecture Document that describes server infrastructure and client-server communication.</p>"},{"location":"sdlc/testing/","title":"Testing","text":""},{"location":"sdlc/testing/#overview","title":"Overview","text":"<p>The system undergoes various forms of testing, such as unit, integration, system, and acceptance testing, to identify bugs and ensure all requirements are met. Technical Writing Role: Writers help create testing plans and document known issues or test results.</p> <p>T</p>"},{"location":"sdlc/testing/#associated_documents_test_case_document","title":"Associated Documents: Test Case Document","text":"<p>Test Case Document: Defines how to verify that each function or feature meets the requirements.  </p>"},{"location":"sdlc/testing/#example","title":"Example","text":"<p>A Test Plan for ensuring that the user authentication feature works correctly, detailing the different test cases, expected outcomes, and pass/fail criteria.</p>"}]}